///////////////////////////////////////////////////////////////////////////////////////////////////////
// Модуль предназначен для интеграции с Мобильным приложением ООО Бизнес-фабрика
// содержит функции для взаимодействия с внутренния API
//
//  2025 ООО Бизнес-фабрика
//  Разработчик Бабич Д.А.

#Область ОсновныеЗапросыКТСД  

Функция ПолучитьШтрихКод(Параметр="")Экспорт
	Результат = Новый Массив;
	Данные = ПолучитьНастройкуТСДНовая();
	Пока Данные.Следующий()  Цикл
		
		Если Не Данные.ПутьКУстройству = "" И не Данные.Порт  = "" Тогда
			Попытка	
				СоединениеHTTP = Новый HTTPСоединение(Данные.ПутьКУстройству,Число(Данные.Порт),,,,30);
				ЗапросHTTP = Новый HTTPЗапрос("/"+Параметр); 
				Ответ = СоединениеHTTP.Получить(ЗапросHTTP);
				Если Ответ.КодСостояния = 200 Тогда
					Результат.Добавить(Ответ.ПолучитьТелоКакСтроку());
					
				Иначе
					ОбщегоНазначения.СообщитьПользователю(СтрШаблон("Оборудование по адресу: %1 не доступно",Данные.ПутьКУстройству));
				КонецЕсли;
				
			Исключение
				ОбщегоНазначения.СообщитьПользователю(СтрШаблон("Оборудование по адресу: %1 не доступно",Данные.ПутьКУстройству));
			КонецПопытки;	
			
			
			
		Иначе
			ОбщегоНазначения.СообщитьПользователю("Настройка оборудования не доступна");
		КонецЕсли;
		
		
	КонецЦикла;
	
	Возврат Результат; 
	
КонецФункции  

Функция ОповеститьСерверПОСТ(Ресурс, ДанныеОтправки, ТСД= Неопределено) Экспорт
	Данные = ПолучитьНастройкуТСДНовая(); 
	ОтветСервера = "";
	Если ТСД = Неопределено Тогда
		Если Данные.Следующий()  Тогда
			
			Если Не Данные.ПутьКУстройству = "" И не Данные.Порт  = "" Тогда
				
				ОтветСервера = ПостЗапрос(Ресурс, ДанныеОтправки, Данные.ПутьКУстройству, Данные.Порт);
			КонецЕсли;
		КонецЕсли;
	Иначе
		ОтветСервера = ПостЗапрос(Ресурс, ДанныеОтправки, ТСД.ПутьКУстройству, ТСД.Порт);
		
	КонецЕсли;
	//Исключение
	
	//КонецПопытки;
	
	Возврат ОтветСервера;
	
КонецФункции 

Функция ПостЗапрос(Ресурс, ДанныеОтправки, ПутьКУстройству, Порт)
	ЗаголовокЗапросаHTTP = Новый Соответствие();
	ЗаголовокЗапросаHTTP.Вставить("Content-Type", "application/json; charset=utf-8");
	HTTP = Новый HTTPСоединение(ПутьКУстройству,Число(Порт),,,,30);    
	запросPOST = Новый HTTPЗапрос(Ресурс, ЗаголовокЗапросаHTTP);         
	запросPOST.УстановитьТелоИзСтроки(ДанныеОтправки, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
	
	//Попытка        
	HTTPОтвет = HTTP.ОтправитьДляОбработки(запросPOST);
	ОтветСервера = HTTPОтвет.ПолучитьТелоКакСтроку();
	Возврат ОтветСервера;
КонецФункции	

Функция ПолучитьНастройкуТСД()
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	БФ_Оборудование.ПутьКУстройству КАК ПутьКУстройству,
	|	БФ_Оборудование.Порт КАК Порт
	|ИЗ
	|	РегистрСведений.БФ_Оборудование КАК БФ_Оборудование
	|ГДЕ
	|	БФ_Оборудование.Пользователь = &Пользователь
	|	И БФ_Оборудование.Используется = ИСТИНА";
	
	Запрос.УстановитьПараметр("Пользователь", Пользователи.ТекущийПользователь());
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Возврат ВыборкаДетальныеЗаписи; 
		
	КонецЕсли;
	Возврат "";
	
КонецФункции   

Функция ПолучитьНастройкуТСДНовая()
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	БФ_Оборудование.ПутьКУстройству КАК ПутьКУстройству,
	|	БФ_Оборудование.Порт КАК Порт
	|ИЗ
	|	Справочник.БФ_Оборудование КАК БФ_Оборудование
	|ГДЕ
	|	БФ_Оборудование.Используется = ИСТИНА
	|	И БФ_Оборудование.СуперЮзер = ЛОЖЬ
	|	И БФ_Оборудование.Пользователь = &Пользователь
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	БФ_ОборудованиеТаблицаОборудования.ПутьКУстройству,
	|	БФ_ОборудованиеТаблицаОборудования.Порт
	|ИЗ
	|	Справочник.БФ_Оборудование.ТаблицаОборудования КАК БФ_ОборудованиеТаблицаОборудования
	|ГДЕ
	|	БФ_ОборудованиеТаблицаОборудования.Используется = ИСТИНА
	|	И БФ_ОборудованиеТаблицаОборудования.Ссылка.СуперЮзер = ИСТИНА
	|	И БФ_ОборудованиеТаблицаОборудования.Ссылка.Пользователь = &Пользователь
	|	И БФ_ОборудованиеТаблицаОборудования.Ссылка.Используется = ИСТИНА";
	
	Запрос.УстановитьПараметр("Пользователь", Пользователи.ТекущийПользователь());
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Возврат ВыборкаДетальныеЗаписи	
КонецФункции 

Функция ПолучитьВсеТСД()Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	БФ_Оборудование.ПутьКУстройству КАК ПутьКУстройству,
	|	БФ_Оборудование.Порт КАК Порт,
	|	БФ_Оборудование.Наименование КАК Наименование,
	|	БФ_Оборудование.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.БФ_Оборудование КАК БФ_Оборудование
	|ГДЕ
	|	БФ_Оборудование.Используется = ИСТИНА
	|	И БФ_Оборудование.СуперЮзер = ЛОЖЬ";
	
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Возврат ВыборкаДетальныеЗаписи	
КонецФункции

Функция ОпросТСД()Экспорт
	Результат = Новый Массив;
	Данные = ПолучитьВсеТСД();
	Пока Данные.Следующий()  Цикл
		
		Если Не Данные.ПутьКУстройству = "" И не Данные.Порт  = "" Тогда
			Попытка	
				СоединениеHTTP = Новый HTTPСоединение(Данные.ПутьКУстройству,Число(Данные.Порт),,,,30);
				ЗапросHTTP = Новый HTTPЗапрос("/ready"); 
				Ответ = СоединениеHTTP.Получить(ЗапросHTTP);
				
				СтруктураРезультата = Новый Структура;
				СтруктураРезультата.Вставить("ТСД", Неопределено);
				СтруктураРезультата.Вставить("Состояние","");
				СтруктураРезультата.Вставить("Отбор","");
				СтруктураРезультата.Вставить("Статус","");
				СтруктураРезультата.Вставить("Версия","");
				СтруктураРезультата.Вставить("Сотрудник","");
				СтруктураРезультата.Вставить("Ошибка","");
				
				
				Если Ответ.КодСостояния = 200 Тогда
					СтрокаОтвета = Ответ.ПолучитьТелоКакСтроку();
					Если СтрНачинаетсяС(СтрокаОтвета, "yes") Тогда
						СтруктураРезультата.ТСД = Данные.Ссылка;
						СтруктураРезультата.Состояние = "Свободен";
						РезультатМассив = СтрРазделить(СтрокаОтвета,";");
						СтруктураРезультата.Версия = СтрЗаменить(РезультатМассив[1],"version:", "");;
						СтруктураРезультата.Сотрудник = РезультатМассив[2];
						
						Результат.Добавить(СтруктураРезультата);
					ИначеЕсли СтрНачинаетсяС(Ответ.ПолучитьТелоКакСтроку(),"busy") Тогда
						СтруктураРезультата.ТСД = Данные.Ссылка;
						СтруктураРезультата.Состояние = "В работе";
						РезультатМассив =  СтрРазделить(СтрЗаменить(Ответ.ПолучитьТелоКакСтроку(), "busy;", ""),";"); 
						СтруктураРезультата.Отбор = РезультатМассив[0];//СтрЗаменить(Ответ.ПолучитьТелоКакСтроку(), "busy:", "");
						СтруктураРезультата.Версия = СтрЗаменить(РезультатМассив[1],"version:", "");
						СтруктураРезультата.Сотрудник = РезультатМассив[2];
						Результат.Добавить(СтруктураРезультата);
					ИначеЕсли СтрНачинаетсяС(Ответ.ПолучитьТелоКакСтроку(),"complete") Тогда
						СтруктураРезультата.ТСД = Данные.Ссылка;
						СтруктураРезультата.Состояние = "Отбор завершен";
						РезультатМассив =  СтрРазделить(СтрЗаменить(Ответ.ПолучитьТелоКакСтроку(), "busy;", ""),";"); 
						СтруктураРезультата.Отбор = РезультатМассив[0];//СтрЗаменить(Ответ.ПолучитьТелоКакСтроку(), "busy:", "");
						СтруктураРезультата.Версия = СтрЗаменить(РезультатМассив[1],"version:", "");
						СтруктураРезультата.Сотрудник = РезультатМассив[2];
						Результат.Добавить(СтруктураРезультата);
					ИначеЕсли СтрНачинаетсяС(Ответ.ПолучитьТелоКакСтроку(),"errors") Тогда
						СтруктураРезультата.ТСД = Данные.Ссылка;
						СтруктураРезультата.Состояние = "Завершено c ошибками";
						РезультатМассив = СтрРазделить(СтрЗаменить(Ответ.ПолучитьТелоКакСтроку(), "errors", ""),";");
						ДжейсонСтрока = РезультатМассив[1];
						
						РезультатСтруктура =  JsonВМассивСтруктур(ДжейсонСтрока);
						
						СтруктураРезультата.Версия = СтрЗаменить(РезультатМассив[2],"version:", "");
						СтруктураРезультата.Сотрудник = РезультатМассив[3];
						Если РезультатСтруктура.Свойство("otbor") Тогда
							СтруктураРезультата.Отбор = РезультатСтруктура["otbor"];
						КонецЕсли;
						СтруктураРезультата.Ошибка = РезультатСтруктура["error_text"];
						Результат.Добавить(СтруктураРезультата); 
						
					КонецЕсли;	
				Иначе
					ОбщегоНазначения.СообщитьПользователю(СтрШаблон("Оборудование по адресу: %1 не доступно",Данные.ПутьКУстройству));
				КонецЕсли;
				
			Исключение
				ОбщегоНазначения.СообщитьПользователю(СтрШаблон("Оборудование по адресу: %1 не доступно",Данные.ПутьКУстройству));
			КонецПопытки;	
			
			
			
		Иначе
			ОбщегоНазначения.СообщитьПользователю("Настройка оборудования не доступна");
		КонецЕсли;
		
		
	КонецЦикла;
	
	Возврат Результат; 
	
	
	
КонецФункции	

Функция ГетЗапрос(Ресурс, ТСД)Экспорт
	Результат = "";
	
	Если Не ТСД.ПутьКУстройству = "" И не ТСД.Порт  = "" Тогда
		
		СоединениеHTTP = Новый HTTPСоединение(ТСД.ПутьКУстройству,Число(ТСД.Порт),,,,30);
		ЗапросHTTP = Новый HTTPЗапрос("/"+Ресурс); 
		Ответ = СоединениеHTTP.Получить(ЗапросHTTP);
		Если Ответ.КодСостояния = 200 Тогда
			Результат = Ответ.ПолучитьТелоКакСтроку();
			Возврат Результат;
		КонецЕсли;
		
	КонецЕсли;
	
	
	Возврат Результат; 
	
КонецФункции

Функция Обновить(Файл,Ресурс, ТСД)Экспорт
	
	Результат = "";
	
	
	Если Не ТСД.ПутьКУстройству = "" И не ТСД.Порт  = "" Тогда
		
		СоединениеHTTP = Новый HTTPСоединение(ТСД.ПутьКУстройству,Число(ТСД.Порт),,,,30);
		ЗапросHTTP = Новый HTTPЗапрос("/"+Ресурс); 
		
		ИмяФайлаОтправки = КаталогВременныхФайлов() + "post.tmp"; 
		ИмяФайлаДляЗагрузки = КаталогВременныхФайлов() + "release.zip";
		ПолучитьОбщийМакет("БФ_ФайлПриложения").Записать(ИмяФайлаДляЗагрузки);
		
		
		
		Boundary = Строка(Новый УникальныйИдентификатор());
		МассивФайловДляОбъединения = Новый Массив;
		ИмяФайлаОтправкиНачало = ПолучитьИмяВременногоФайла("tmp");
		ФайлОтправкиНачало = Новый ЗаписьТекста(ИмяФайлаОтправкиНачало, КодировкаТекста.ANSI, Символы.ПС, Ложь);
		ФайлОтправкиНачало.ЗаписатьСтроку("--" + Boundary);
		ФайлОтправкиНачало.ЗаписатьСтроку("Content-Disposition: form-data; name=""file""; filename=""" + ИмяФайлаДляЗагрузки + """");
		ФайлОтправкиНачало.ЗаписатьСтроку("");
		ФайлОтправкиНачало.Закрыть();
		
		МассивФайловДляОбъединения.Добавить(ИмяФайлаОтправкиНачало);
		
		ИмяФайлаДляЗагрузкиВременный = ПолучитьИмяВременногоФайла("tmp");
		КопироватьФайл(ИмяФайлаДляЗагрузки, ИмяФайлаДляЗагрузкиВременный);
		МассивФайловДляОбъединения.Добавить(ИмяФайлаДляЗагрузкиВременный);
		
		ИмяФайлаОтправкиКонец = ПолучитьИмяВременногоФайла("apk");
		ФайлОтправкиКонец = Новый ЗаписьТекста(ИмяФайлаОтправкиКонец, КодировкаТекста.ANSI, Символы.ПС, Ложь);
		
		ФайлОтправкиКонец.ЗаписатьСтроку("--" + Boundary);
		
		ФайлОтправкиКонец.ЗаписатьСтроку("--" + Boundary + "--");
		ФайлОтправкиКонец.Закрыть();
		
		МассивФайловДляОбъединения.Добавить(ИмяФайлаОтправкиКонец);
		
		ОбъединитьФайлы(МассивФайловДляОбъединения, ИмяФайлаОтправки);     
		Заголовки = Новый Соответствие();
		Заголовки.Вставить("Content-Type", "multipart/form-data; boundary=" + Boundary);
		
		HTTPЗапрос = Новый HTTPЗапрос("/"+Ресурс, Заголовки);
		HTTPЗапрос.УстановитьИмяФайлаТела(ИмяФайлаОтправки);    
		
		Ответ = СоединениеHTTP.ОтправитьДляОбработки(HTTPЗапрос);
		
		Если Ответ.КодСостояния = 200 Тогда
			Результат = Ответ.ПолучитьТелоКакСтроку();
			Возврат Результат;
		КонецЕсли;
		
	КонецЕсли;
	
	
	Возврат Результат; 
	
	
	
КонецФункции
#КонецОбласти 

#Область ОбработкаДанных

Функция ПолучитьСодержимоеЯчеек(ЯчейкаОткуда, ЯчейкаКуда, Номенклатура)Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СУММА(ЕСТЬNULL(ТоварыВЯчейкахОстатки.ВНаличииОстаток, 0)) КАК РезультатОткуда
	|ИЗ
	|	РегистрНакопления.ТоварыВЯчейках.Остатки(
	|			&Период,
	|			Ячейка = &Ячейка1
	|				И Номенклатура = &Номенклатура) КАК ТоварыВЯчейкахОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	ТоварыВЯчейкахОстатки.Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(ЕСТЬNULL(ТоварыВЯчейкахОстатки.ВНаличииОстаток, 0)) КАК РезультатКуда
	|ИЗ
	|	РегистрНакопления.ТоварыВЯчейках.Остатки(&Период, Ячейка = &Ячейка2) КАК ТоварыВЯчейкахОстатки";
	
	Запрос.УстановитьПараметр("Период", ТекущаяДатаСеанса());
	Запрос.УстановитьПараметр("Ячейка1", ЯчейкаОткуда); 
	Запрос.УстановитьПараметр("Ячейка2", ЯчейкаКуда);
	
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	ВыборкаОткуда = МассивРезультатов[0].Выбрать();;
	
	
	КоличествоВПервойЯчейке = 0;
	Если  ВыборкаОткуда.Следующий() Тогда
		КоличествоВПервойЯчейке = ВыборкаОткуда.РезультатОткуда;
		
	КонецЕсли;
	
	ВыборкаКуда = МассивРезультатов[1].Выбрать();;
	
	
	КоличествоВоВторойЯчейке = 0;
	Если  ВыборкаКуда.Следующий() Тогда
		КоличествоВоВторойЯчейке = ВыборкаКуда.РезультатКуда;
		
	КонецЕсли;
	СтруктураРезультат = Новый Структура; 
	СтруктураРезультат.Вставить("Откуда", КоличествоВПервойЯчейке); 
	СтруктураРезультат.Вставить("Куда", КоличествоВоВторойЯчейке); 
	
	ВОЗВРАТ СтруктураРезультат;
	
	
КонецФункции	

Функция НайтиНоменклатуруПоШК(Штрихкод) Экспорт
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ШтрихкодыНоменклатуры.Номенклатура КАК Номенклатура,
	|	ШтрихкодыНоменклатуры.Упаковка КАК Упаковка,
	|	ШтрихкодыНоменклатуры.Упаковка.Числитель КАК УпаковкаЧислитель
	|ИЗ
	|	РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
	|ГДЕ
	|	ШтрихкодыНоменклатуры.Штрихкод = &Штрихкод";
	
	Запрос.УстановитьПараметр("Штрихкод", Штрихкод);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Возврат  ВыборкаДетальныеЗаписи;
	КонецЕсли;
	
	СтруктураПустая = Новый Структура;
	СтруктураПустая.Вставить("Номенклатура", Справочники.Номенклатура.ПустаяСсылка());	
	СтруктураПустая.Вставить("Упаковка", Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка());	
	СтруктураПустая.Вставить("УпаковкаЧислитель", 0);
	
	Возврат СтруктураПустая;
	
КонецФункции

Функция НайтиНоменклатуруПоШКТекстом(Штрихкод) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	НоменклатураСправочник.Артикул КАК Артикул,
	|	УпаковкиЕдиницыИзмерения.Наименование КАК Упаковка
	|ИЗ
	|	РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК НоменклатураСправочник
	|		ПО ШтрихкодыНоменклатуры.Номенклатура = НоменклатураСправочник.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УпаковкиЕдиницыИзмерения КАК УпаковкиЕдиницыИзмерения
	|		ПО ШтрихкодыНоменклатуры.Упаковка = УпаковкиЕдиницыИзмерения
	|ГДЕ
	|	ШтрихкодыНоменклатуры.Штрихкод = &Штрихкод";
	
	Запрос.УстановитьПараметр("Штрихкод", Штрихкод);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Возврат  ВыборкаДетальныеЗаписи;
	КонецЕсли;
	
	СтруктураПустая = Новый Структура;
	СтруктураПустая.Вставить("Артикул", "");	
	СтруктураПустая.Вставить("Упаковка", "");	
	
	Возврат СтруктураПустая;
	
КонецФункции


Функция НайтШКНоменклатурыИУпаковки(Номенклатура, Упаковка) Экспорт
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ШтрихкодыНоменклатуры.Штрихкод КАК Штрихкод
	|ИЗ
	|	РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
	|ГДЕ
	|	ШтрихкодыНоменклатуры.Номенклатура = &Номенклатура
	|	И ШтрихкодыНоменклатуры.Упаковка = &Упаковка";
	
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.УстановитьПараметр("Упаковка", Упаковка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Возврат  ВыборкаДетальныеЗаписи.Штрихкод;
	КонецЕсли;
	
	
	Возврат "";
	
КонецФункции 

Функция ПолучитьШКНоменклатуры(Номенклатура, Упаковка)  Экспорт
	ШК = "";
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ШтрихкодыНоменклатуры.Штрихкод КАК Штрихкод
	|ИЗ
	|	РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
	|ГДЕ
	|	ШтрихкодыНоменклатуры.Номенклатура = &Номенклатура
	|	И ШтрихкодыНоменклатуры.Упаковка = &Упаковка";
	
	Запрос.УстановитьПараметр("Упаковка", Упаковка);
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Возврат ВыборкаДетальныеЗаписи.Штрихкод
	КонецЕсли;
	
	Возврат ШК;
	
	
КонецФункции

Функция ПолучитьСкладскуюЯчейку(Адрес, Склад)Экспорт
	Ячейка = Справочники.СкладскиеЯчейки.НайтиПоКоду(Адрес);
	Если Не Ячейка.Пустая() Тогда
		Возврат Ячейка;
	Иначе
		НоваяЯчейка = Справочники.СкладскиеЯчейки.СоздатьЭлемент();
		НоваяЯчейка.Код = Адрес;
		НоваяЯчейка.Наименование = "Весь склад";
		НоваяЯчейка.Владелец = Склад;
		НоваяЯчейка.ТипСкладскойЯчейки = ПредопределенноеЗначение("Перечисление.ТипыСкладскихЯчеек.Хранение");
		НоваяЯчейка.Записать();
		Возврат НоваяЯчейка.Ссылка;
	КонецЕсли;	
КонецФункции

Функция СоздатьотборРазмещение(Параметры)Экспорт
	
	Склад  				 = Параметры.Склад;
	Комментарий  		 = Параметры.Ответственный;
	Если Параметры.Свойство("ЗонаПриемки") Тогда
		ЗонаПриемки 	 	 = Параметры.ЗонаПриемки;
	Иначе
		ЗонаПриемки 	 	 = Справочники.СкладскиеЯчейки.ПустаяСсылка();
	КонецЕсли;
	
	Номенклатура 	 	 = Параметры.Номенклатура;
	
	Если Параметры.Свойство("Упаковка") Тогда
		Упаковка	 	 	 = Параметры.Упаковка;
	Иначе
		Упаковка             = Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка();
	КонецЕсли;
	
	УпаковкаЧислитель 		 = Параметры.УпаковкаЧислитель;
	
	КоличествоРазмещения 	 = 1;
	
	Если Параметры.Свойство("ЯчейкаРазмещения") Тогда
		ЯчейкаРазмещения 	 = Параметры.ЯчейкаРазмещения;
	Иначе
		ЯчейкаРазмещения 	 = Справочники.СкладскиеЯчейки.ПустаяСсылка();
	КонецЕсли;
	
	Если  Не ЯчейкаРазмещения.Пустая() И  Не Упаковка.Пустая() Тогда
		ДокументОтбор = Документы.ОтборРазмещениеТоваров.СоздатьДокумент(); 
		ДокументОтбор.Статус = ПредопределенноеЗначение("Перечисление.СтатусыОтборовРазмещенийТоваров.ВыполненоБезОшибок");
		ДокументОтбор.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийОтбораРазмещенияТоваров.Размещение");
		ДокументОтбор.Дата = ТекущаяДатаСеанса(); 
		ДокументОтбор.Склад = Склад;
		ДокументОтбор.Комментарий = Комментарий;
		
		СтрокаРазмещения = ДокументОтбор.ТоварыРазмещение.Добавить();
		СтрокаРазмещения.Ячейка = ЯчейкаРазмещения;
		СтрокаРазмещения.Номенклатура = Номенклатура;
		СтрокаРазмещения.Упаковка = ПолучитьШтуку(Номенклатура);
		
		СтрокаРазмещения.КоличествоУпаковокРазмещено = КоличествоРазмещения;
		СтрокаРазмещения.КоличествоУпаковок = КоличествоРазмещения;
		
		СтрокаРазмещения.КоличествоРазмещено = УпаковкаЧислитель;
		СтрокаРазмещения.Количество = УпаковкаЧислитель;
		
		НачатьТранзакцию();
		Попытка
			ДокументОтбор.Записать(РежимЗаписиДокумента.Проведение);
			ЗафиксироватьТранзакцию();
			Возврат Истина;
		Исключение
			ОтменитьТранзакцию();
			Возврат Ложь;
		КонецПопытки;
	Иначе
		
		Возврат Ложь;
		
		
	КонецЕсли;
	
	
КонецФункции 

Процедура ПереносУпаковокВЯчейки(Параметры)Экспорт
	
	Склад  				 = Параметры.Склад;
	Ответственный  		 = Параметры.Ответственный;
	Если Параметры.Свойство("ЯчейкаОтбора") Тогда
		ЯчейкаОтбора 	 	 = Параметры.ЯчейкаОтбора;
	Иначе
		ЯчейкаОтбора 	 	 = Справочники.СкладскиеЯчейки.ПустаяСсылка();
	КонецЕсли;
	Номенклатура 	 	 = Параметры.Номенклатура;
	Если Параметры.Свойство("Упаковка") Тогда
		Упаковка	 	 	 = Параметры.Упаковка;
	Иначе
		Упаковка             = Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка();
	КонецЕсли;
	
	КоличествоОтбора 	 = 1;
	
	Если Параметры.Свойство("ЯчейкаРазмещения") Тогда
		ЯчейкаРазмещения 	 = Параметры.ЯчейкаРазмещения;
	Иначе
		ЯчейкаРазмещения 	 = Справочники.СкладскиеЯчейки.ПустаяСсылка();
	КонецЕсли;
	
	Если Параметры.Свойство("КоличествоРазмещения") Тогда	
		КоличествоРазмещения = Параметры.КоличествоРазмещения;
	Иначе
		КоличествоРазмещения = 0;	
	КонецЕсли;	
	
	Если Не ЯчейкаОтбора.Пустая() И  Не ЯчейкаРазмещения.Пустая() И  Не Упаковка.Пустая() Тогда
		ДокументОтбор = Документы.ОтборРазмещениеТоваров.СоздатьДокумент(); 
		ДокументОтбор.Статус = ПредопределенноеЗначение("Перечисление.СтатусыОтборовРазмещенийТоваров.ВРаботе");
		ДокументОтбор.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийОтбораРазмещенияТоваров.Перемещение");
		ДокументОтбор.Дата = ТекущаяДатаСеанса(); 
		ДокументОтбор.Склад = Склад;
		
		ДокументОтбор.БФ_Подпитка = Истина;
		
		СтрокаОтбора = ДокументОтбор.ТоварыОтбор.Добавить();
		СтрокаОтбора.Ячейка = ЯчейкаОтбора;
		СтрокаОтбора.Номенклатура = Номенклатура;
		СтрокаОтбора.Упаковка = Упаковка;
		СтрокаОтбора.КоличествоУпаковок = КоличествоОтбора;
		СтрокаОтбора.КоличествоОтобрано = КоличествоОтбора;
		СтрокаОтбора.КоличествоУпаковок = КоличествоОтбора;
		
		СтрокаРазмещения = ДокументОтбор.ТоварыРазмещение.Добавить();
		СтрокаРазмещения.Ячейка = ЯчейкаРазмещения;
		СтрокаРазмещения.Номенклатура = Номенклатура;
		СтрокаРазмещения.Упаковка = ПолучитьШтуку(Номенклатура);
		СтрокаРазмещения.КоличествоУпаковокРазмещено = Упаковка.Числитель;
		СтрокаРазмещения.КоличествоРазмещено = Упаковка.Числитель;
		СтрокаРазмещения.Количество = Упаковка.Числитель;
		
		НачатьТранзакцию();
		Попытка
			ДокументОтбор.Записать(РежимЗаписиДокумента.Проведение);
			ОбщегоНазначения.СообщитьПользователю("Подпитка выполненна");
			ЗафиксироватьТранзакцию();
			
		Исключение
			ОтменитьТранзакцию();
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		КонецПопытки;
	Иначе
		
		ОбщегоНазначения.СообщитьПользователю("Не все ячейки выбраны(ячейка отбора и ячейка размещения)!");
		
		
	КонецЕсли;
	
	
КонецПроцедуры 

Процедура ПереносУпаковокВЯчейкиИзРегистра(Параметры)Экспорт
	
	Склад  				 = Параметры.Склад;
	Ответственный  		 = Параметры.Ответственный;
	ЯчейкаОтбора 	 	 = Параметры.ЯчейкаОтбора;
	Номенклатура 	 	 = Параметры.Номенклатура;
	Упаковка	 	 	 = Параметры.Упаковка;
	КоличествоОтбора 	 = 1;
	ЯчейкаРазмещения 	 = Параметры.ЯчейкаРазмещения;
	//КоличествоРазмещения = Упаковка.Числитель*КоличествоОтбора;
	
	ДокументОтбор = Документы.ОтборРазмещениеТоваров.СоздатьДокумент(); 
	ДокументОтбор.Статус = ПредопределенноеЗначение("Перечисление.СтатусыОтборовРазмещенийТоваров.ВыполненоБезОшибок");
	ДокументОтбор.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийОтбораРазмещенияТоваров.Перемещение");
	ДокументОтбор.Дата = ТекущаяДатаСеанса(); 
	ДокументОтбор.Склад = Склад;
	
	ДокументОтбор.БФ_Подпитка = Истина;
	
	СтрокаОтбора = ДокументОтбор.ТоварыОтбор.Добавить();
	СтрокаОтбора.Ячейка = ЯчейкаОтбора;
	СтрокаОтбора.Номенклатура = Номенклатура;
	СтрокаОтбора.Упаковка = Упаковка;
	СтрокаОтбора.КоличествоУпаковок = КоличествоОтбора;
	СтрокаОтбора.Количество = Упаковка.Числитель;
	
	СтрокаРазмещения = ДокументОтбор.ТоварыРазмещение.Добавить();
	СтрокаРазмещения.Ячейка = ЯчейкаРазмещения;
	СтрокаРазмещения.Номенклатура = Номенклатура;
	СтрокаРазмещения.Упаковка = ПолучитьШтуку(Номенклатура);
	СтрокаРазмещения.КоличествоУпаковок = Упаковка.Числитель;
	СтрокаРазмещения.Количество = Упаковка.Числитель;
	
	НачатьТранзакцию();
	Попытка
		ДокументОтбор.Записать(РежимЗаписиДокумента.Проведение);
		ОбщегоНазначения.СообщитьПользователю("Подпитка выполненна");
		ЗафиксироватьТранзакцию();

	Исключение
		ОтменитьТранзакцию();
		ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
	КонецПопытки;
	
	
КонецПроцедуры

Процедура ПереносУпаковокВЯчейкиСписком(Параметры, Список)Экспорт
	
	Склад  				 = Параметры.Склад;
	Ответственный  				 = Параметры.Ответственный;
	Если Параметры.Свойство("ЯчейкаОтбора") Тогда
		ЯчейкаОтбора 	 	 = Параметры.ЯчейкаОтбора;
	Иначе
		ЯчейкаОтбора 	 	 = Справочники.СкладскиеЯчейки.ПустаяСсылка();
	КонецЕсли;
	
	Если Не ЯчейкаОтбора.Пустая() Тогда
		ДокументОтбор = Документы.ОтборРазмещениеТоваров.СоздатьДокумент(); 
		ДокументОтбор.Статус = ПредопределенноеЗначение("Перечисление.СтатусыОтборовРазмещенийТоваров.ВыполненоБезОшибок");
		ДокументОтбор.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийОтбораРазмещенияТоваров.Перемещение");
		ДокументОтбор.Дата = ТекущаяДатаСеанса(); 
		ДокументОтбор.Склад = Склад;
		ДокументОтбор.Ответственный = Ответственный;
		
		Для каждого ЭлементСписка Из Список Цикл
			Если ЭлементСписка.Выбор тогда 
				СтрокаОтбора = ДокументОтбор.ТоварыОтбор.Добавить();
				СтрокаОтбора.Ячейка = ЯчейкаОтбора;
				СтруктураНоменклатуры = НайтиНоменклатуруПоШК(ЭлементСписка.ШКНоменклатуры);
				
				СтрокаОтбора.Номенклатура = СтруктураНоменклатуры.Номенклатура;
				СтрокаОтбора.Упаковка = СтруктураНоменклатуры.Упаковка;
				СтрокаОтбора.КоличествоУпаковок = 1;
				
				СтрокаРазмещения = ДокументОтбор.ТоварыРазмещение.Добавить();
				СтрокаРазмещения.Ячейка = ПолучитьСкладскуюЯчейку(ЭлементСписка.Ячейка, Склад);
				СтрокаРазмещения.Номенклатура = СтруктураНоменклатуры.Номенклатура;
				СтрокаРазмещения.Упаковка = СтруктураНоменклатуры.Упаковка;
				СтрокаРазмещения.КоличествоУпаковок = 1;
			КонецЕсли;
		КонецЦикла;
		НачатьТранзакцию();
		Попытка
			ДокументОтбор.Записать(РежимЗаписиДокумента.Проведение);
			ОбщегоНазначения.СообщитьПользователю("Инвентаризация выполненна");
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		КонецПопытки;
	Иначе
		
		ОбщегоНазначения.СообщитьПользователю("Не все ячейки выбраны(ячейка отбора и ячейка размещения)!");
		
		
	КонецЕсли;
	
	
КонецПроцедуры

Процедура ЗаданиеНаПодпитку(Параметры)Экспорт
	Склад  				 = Параметры.Склад;
	Ответственный  		 = Параметры.Ответственный;
	Если Параметры.Свойство("ЯчейкаОтбора") Тогда
		ЯчейкаОтбора 	 	 = Параметры.ЯчейкаОтбора;
	Иначе
		ЯчейкаОтбора 	 	 = Справочники.СкладскиеЯчейки.ПустаяСсылка();
	КонецЕсли;
	Номенклатура 	 	 = Параметры.Номенклатура;
	Если Параметры.Свойство("Упаковка") Тогда
		Упаковка	 	 	 = Параметры.Упаковка;
	Иначе
		Упаковка             = Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка();
	КонецЕсли;
	
	КоличествоОтбора 	 = 1;
	
	Если Параметры.Свойство("ЯчейкаРазмещения") Тогда
		ЯчейкаРазмещения 	 = Параметры.ЯчейкаРазмещения;
	Иначе
		ЯчейкаРазмещения 	 = Справочники.СкладскиеЯчейки.ПустаяСсылка();
	КонецЕсли;
	
	Если Параметры.Свойство("КоличествоРазмещения") Тогда	
		КоличествоРазмещения = Параметры.КоличествоРазмещения;
	Иначе
		КоличествоРазмещения = 0;	
	КонецЕсли;	
	
	Если Не ЯчейкаОтбора.Пустая()  И  Не Упаковка.Пустая() Тогда
		
		НачатьТранзакцию();
		
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.БФ_ПодпиткаЯчеек");
			ЭлементБлокировки.УстановитьЗначение("ЯчейкаОтбора", ЯчейкаОтбора);
			Блокировка.Заблокировать();
			
			МенеджерЗаписи = РегистрыСведений.БФ_ПодпиткаЯчеек.СоздатьМенеджерЗаписи();
			
			МенеджерЗаписи.Период = ТекущаяДатаСеанса();
			МенеджерЗаписи.ЯчейкаОтбора = ЯчейкаОтбора;
			МенеджерЗаписи.Номенклатура = Номенклатура;
			МенеджерЗаписи.Склад 		= Склад;
			МенеджерЗаписи.Ответственный = Ответственный;
			МенеджерЗаписи.Упаковка = Упаковка;
			МенеджерЗаписи.Статус = ПредопределенноеЗначение("Перечисление.БФ_СтатусПодпитки.ВРаботе");
			МенеджерЗаписи.Записать(); 
			
			ОбщегоНазначения.СообщитьПользователю("Задание сформировано");
			ЗафиксироватьТранзакцию(); 
			
			
		Исключение
			ОтменитьТранзакцию();
			ОбщегоНазначения.СообщитьПользователю("Ошибка создания задания");
			
		КонецПопытки;
		
		
		
	КонецЕсли;
КонецПроцедуры	

Функция ПолучитьШтуку(Номенклатура)
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	УпаковкиЕдиницыИзмерения.Ссылка КАК Упаковка
	|ИЗ
	|	Справочник.УпаковкиЕдиницыИзмерения КАК УпаковкиЕдиницыИзмерения
	|ГДЕ
	|	УпаковкиЕдиницыИзмерения.Владелец = &Владелец
	|	И УпаковкиЕдиницыИзмерения.Числитель = 1";
	
	Запрос.УстановитьПараметр("Владелец", Номенклатура);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Возврат ВыборкаДетальныеЗаписи.Упаковка;	
	КонецЕсли;
	Возврат Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка();
	
	
КонецФункции
#КонецОбласти
#Область Логи
Процедура ЗаписатьЛог(ТСД, Пользователь="", Метод = "", Результат = "")  Экспорт
	
	МенеджерЗаписи =  РегистрыСведений.БФ_ЛогиТСД.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Дата = ТекущаяДатаСеанса();
	МенеджерЗаписи.ТСД = ТСД;
	МенеджерЗаписи.Пользователь = Пользователь;
	МенеджерЗаписи.Метод = Метод;
	МенеджерЗаписи.Результат = Результат;
	МенеджерЗаписи.Записать();
	
КонецПроцедуры

#КонецОбласти
#Область ТехническиеПодпрограммы
Функция JsonВМассивСтруктур(ВходнаяСтрока)Экспорт
	СтруктураРезультат = Неопределено;
	ЧтениеJSON = Новый ЧтениеJSON();
	ЧтениеJSON.УстановитьСтроку(ВходнаяСтрока);
	СтруктураРезультат = ПрочитатьJSON(ЧтениеJSON);
	ЧтениеJSON.Закрыть();
	Возврат СтруктураРезультат;
	
КонецФункции

Функция JsonИзМассиваСтруктур(Массив)Экспорт
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();  
	ЗаписатьJSON(ЗаписьJSON, Массив);            
	JsonСтрока = ЗаписьJSON.Закрыть();
	Возврат JsonСтрока;
КонецФункции	
#КонецОбласти