///////////////////////////////////////////////////////////////////////////////////////////////////////
// Обработка для первоначальной настройки работы с ситемой с подсистемой 1С:ЭДО и xDE Pro, а так же
// 
//
// Все права защищены. 
// Copyright (c) 2024, ООО ТерраЛинк Девелопмент
// Разработчик Бабич Д.А.

&НаКлиенте
Перем ВыполняетсяЗакрытие;

#Область ОбработчикиСобытийФормы

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ


&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	ПолучитьОсновнуюНастройку();
	ПрочитатьПараметрыАвторизацииНаСервере();
	ЗаполнитьЧасовыеПояса();
	
	ЧасовойПоясИнформационнойБазы = ПолучитьЧасовойПоясИнформационнойБазы();
	Если ПустаяСтрока(ЧасовойПоясИнформационнойБазы) Тогда
		ЧасовойПоясИнформационнойБазы = ЧасовойПояс();
	КонецЕсли;
	
	Если Параметры.Свойство("ТекущаяСтраница") Тогда
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы[Параметры.ТекущаяСтраница];
	КонецЕсли;
	тл_РегламентноеСобытие = ПолучитьРегламентноезадание();
	Расписание = тл_РегламентноеСобытие.Расписание;
	ЗапускатьКаждые = Расписание.ПериодПовтораВТечениеДня; 
	ЗапускатьАвтоматическоеПолучениеДокументов = ?( тл_РегламентноеСобытие.Использование,  Истина,  Ложь);
	ТекущаяНастройка  =  Справочники.тл_НастройкиЭДО.НайтиПоРеквизиту("ОсновнаяНастройка", Истина);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ


#КонецОбласти

#Область ОбработчикиКомандФормы

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Функция ПроверитьЗаполнениеОбязательныхНастроек()
	ТекстСообщения = "";
	Если НЕ ЗначениеЗаполнено(URLСервисаЭДО) Тогда
		ТекстСообщения = ТекстСообщения + "Общие настройки: URL сервиса ЭДО" + Символы.ПС;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(URLСервисаКриптографии) Тогда
		ТекстСообщения = ТекстСообщения + "Общие настройки: URL сервиса криптографии" + Символы.ПС;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(URLСервераАрхива) Тогда
		ТекстСообщения = ТекстСообщения + "Общие настройки: URL сервиса архива" + Символы.ПС;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Логин) Тогда
		ТекстСообщения = ТекстСообщения + "Параметры авторизации: Логин" + Символы.ПС;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Пароль) Тогда
		ТекстСообщения = ТекстСообщения + "Параметры авторизации: Пароль" + Символы.ПС;
	КонецЕсли;
	
	Если НЕ ТекстСообщения = "" Тогда
		ТекстСообщения = "Не заполнены следующие поля, обязательные для работы с xDE:" + Символы.ПС + ТекстСообщения + 
		Символы.ПС + "Продолжить выполнение операции?";
	КонецЕсли;
	
	Возврат ТекстСообщения;
КонецФункции


&НаКлиенте
Процедура ПослеЗаписатьИЗакрыть(Результат, Параметры) Экспорт
	Если Результат = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	ЗаписатьИЗакрытьНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	ТекстСообщения = ПроверитьЗаполнениеОбязательныхНастроек();
	Если ТекстСообщения = "" Тогда
		ЗаписатьИЗакрытьНаСервере();
	Иначе
		Оповещение = Новый ОписаниеОповещения("ПослеЗаписатьИЗакрыть", ЭтотОбъект, Параметры);
		ПоказатьВопрос(Оповещение, ТекстСообщения, РежимДиалогаВопрос.ДаНет, 0);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	Если НЕ ВыполняетсяЗакрытие И НЕ ЗавершениеРаботы Тогда
		ТекстСообщения = ПроверитьЗаполнениеОбязательныхНастроек();
		Если НЕ ТекстСообщения = "" Тогда
			Отказ = Истина;
			СтандартнаяОбработка = Ложь;
			Оповещение = Новый ОписаниеОповещения("ПослеПередЗакрытием", ЭтотОбъект, Параметры);
			ПоказатьВопрос(Оповещение, ТекстСообщения, РежимДиалогаВопрос.ДаНет, 0);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПослеПередЗакрытием(Результат, Параметры) Экспорт
	Если Результат = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	ВыполняетсяЗакрытие = Истина;
	ЭтаФорма.Закрыть();
КонецПроцедуры

&НаКлиенте
Процедура НастройкиОператоровЭДО(Команда)
	ОткрытьФорму("РегистрСведений.тл_НастройкиОператоровЭДО.ФормаСписка");
КонецПроцедуры

&НаКлиенте
Процедура ЯщикиКонтрагентов(Команда)
	ОткрытьФорму("РегистрСведений.тл_ЯщикиКонтрагентовЭДО.ФормаСписка");
КонецПроцедуры

&НаКлиенте
Процедура ЯщикиОрганизаций(Команда)
	ОткрытьФорму("РегистрСведений.тл_ЯщикиОрганизацийЭДО.ФормаСписка");
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьТокен(Команда)	
	ПараметрыАвторизации		= ПолучитьТокенНаСервере();	
	ЭтотОбъект.Токен			= ПараметрыАвторизации.Токен;
	ЭтотОбъект.ДатаОкончания	= ПараметрыАвторизации.ДатаОкончания;	
	ЭтотОбъект.ТокенПроверен	= ПараметрыАвторизации.ТокенПроверен;
	
	ПроверитьДатуОконченияТокена();
КонецПроцедуры 

&НаСервереБезКонтекста
Функция ПолучитьТокенЛокально()
	Возврат тл_РаботаСxDE.ПолучитьТокен();	
КонецФункции	


#КонецОбласти

#Область СлужебныеПроцедурыИФункции

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаСервере
Процедура ЗаписатьИЗакрытьНаСервере()
	СправочникНастройка = Неопределено;
	Если Не ЗначениеЗаполнено(ОсновнаяНастройка) Тогда
		СправочникНастройка = Справочники.тл_НастройкиЭДО.СоздатьЭлемент();
		СправочникНастройка.ОсновнаяНастройка = Истина;
		СправочникНастройка.Наименование = "Основная настройка"
	Иначе
		СправочникНастройка = ОсновнаяНастройка.ПолучитьОбъект();
	КонецЕсли;
	СправочникНастройка.URLСервераАрхива = URLСервераАрхива;
	СправочникНастройка.URLСервисаЭДО = URLСервисаЭДО;
	СправочникНастройка.URLСервисаКриптографии = URLСервисаКриптографии;
	СправочникНастройка.РегистрацияЛогов = РегистрацияЛогов;
	СправочникНастройка.РегистрацияОшибокРС = РегистрацияОшибокРС;
	СправочникНастройка.РегистрацияОшибокЖР = РегистрацияОшибокЖР;
	СправочникНастройка.ПечатныеФормыxDE = ПечатныеФормыxDE;
	СправочникНастройка.Записать();
	
	ДанныеАвторизации		= Новый Структура();
	ДанныеАвторизации.Вставить("Логин", 					Логин);
	ДанныеАвторизации.Вставить("Пароль", 					Пароль);
	
	тл_РаботаСxDE.ЗаписатьПараметрыАвторизации(ДанныеАвторизации);
	
	Константы.тл_ИспользоватьРасширеннуюАвторизацию.Установить(ИспользоватьРасширеннуюАвторизацию);
	
	Если ЧасовойПоясИнформационнойБазы <> ПолучитьЧасовойПоясИнформационнойБазы() Тогда
		УстановитьПривилегированныйРежим(Истина);
		Попытка
			УстановитьМонопольныйРежим(Истина);
			УстановитьЧасовойПоясИнформационнойБазы(ЧасовойПоясИнформационнойБазы);
			УстановитьМонопольныйРежим(Ложь);
		Исключение
			УстановитьМонопольныйРежим(Ложь);
			ВызватьИсключение;
		КонецПопытки;
		УстановитьПривилегированныйРежим(Ложь);
		УстановитьЧасовойПоясСеанса(ЧасовойПоясИнформационнойБазы);
	КонецЕсли;
	
	ОбновитьПовторноИспользуемыеЗначения();
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЧасовыеПояса()
	Для Каждого ОписаниеЧасовогоПояса Из ПолучитьДопустимыеЧасовыеПояса() Цикл
		СмещениеДатой = Дата(1, 1, 1) + СмещениеСтандартногоВремени(ОписаниеЧасовогоПояса); 
		ПредставлениеСмещения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("(UTC+%1)",
		Формат(СмещениеДатой, "ДФ=HH:mm; ДП=00:00;"));
		ПредставлениеЧасовогоПояса = ПредставлениеСмещения + " " + ОписаниеЧасовогоПояса;
		Элементы.ЧасовойПоясИнформационнойБазы.СписокВыбора.Добавить(ОписаниеЧасовогоПояса, ПредставлениеЧасовогоПояса);
	КонецЦикла;
	Элементы.ЧасовойПоясИнформационнойБазы.СписокВыбора.СортироватьПоПредставлению();
КонецПроцедуры

&НаСервере
Процедура ПолучитьОсновнуюНастройку()
	СтруктураНастроек = тл_ЭДОПовтИсп.ПолучитьОсновнуюНастройкуЭДО();
	ОсновнаяНастройка = СтруктураНастроек.Ссылка;
	URLСервераАрхива = СтруктураНастроек.URLСервераАрхива;
	URLСервисаЭДО = СтруктураНастроек.URLСервисаЭДО;
	URLСервисаКриптографии = ?(СтруктураНастроек.Свойство("URLСервисаКриптографии"), СтруктураНастроек.URLСервисаКриптографии, "");
	РегистрацияЛогов = СтруктураНастроек.РегистрацияЛогов;
	РегистрацияОшибокРС = СтруктураНастроек.РегистрацияОшибокРС;
	РегистрацияОшибокЖР = СтруктураНастроек.РегистрацияОшибокЖР;
	ПечатныеФормыxDE = СтруктураНастроек.ПечатныеФормыxDE;
КонецПроцедуры

&НаСервере
Процедура ПрочитатьПараметрыАвторизацииНаСервере()
	
	ПараметрыАвторизации	= Новый Массив;
	ПараметрыАвторизации.Добавить("Логин");
	ПараметрыАвторизации.Добавить("Пароль");
	
	//vit20240127 begin
	//ИспользоватьРасширеннуюАвторизацию получаем ранее, чем ДанныеАвторизации, т.к. ИспользоватьРасширеннуюАвторизацию используется в методе тл_РаботаСxDE.ПолучитьПараметрыАвторизации( 
	ИспользоватьРасширеннуюАвторизацию = Константы.тл_ИспользоватьРасширеннуюАвторизацию.Получить();
	ДанныеАвторизации		= тл_РаботаСxDE.ПолучитьПараметрыАвторизации(ПараметрыАвторизации, ИспользоватьРасширеннуюАвторизацию); 
	
	Логин 					= ДанныеАвторизации.Логин;
	Пароль					= ДанныеАвторизации.Пароль; 
	
	//ИспользоватьРасширеннуюАвторизацию = Константы.тл_ИспользоватьРасширеннуюАвторизацию.Получить();
	//vit20240127 end
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьТокенНаСервере()
	
	Токен				= "";
	ДатаОкончания		= ТекущаяДатаСеанса();
	
	//TFS_9438_begin
	//ДанныеАвторизации	= тл_РаботаСxDE.ВыполнитьАвторизацию();
	ДанныеАвторизации	= тл_РаботаСxDE_Вызовы_xDE.ВыполнитьАвторизацию();
	//TFS_9438_end
	Если ДанныеАвторизации <> Неопределено Тогда 
		Токен			= ДанныеАвторизации.Токен;
		ДатаОкончания	= ДанныеАвторизации.ДатаОкончания;
	КонецЕсли;
	
	ТокенПроверен			= тл_РаботаСxDE.ПроверитьДатуОкончанияТокена();
	
	Возврат Новый ФиксированнаяСтруктура("Токен, ДатаОкончания, ТокенПроверен", Токен, ДатаОкончания, ТокенПроверен);
КонецФункции //ПолучитьТокенНаСервере

&НаСервереБезКонтекста
Функция ПрочитатьТокенНаСервере()
	
	ПараметрыАвторизации	= Новый Массив;
	ПараметрыАвторизации.Добавить("Токен");
	ПараметрыАвторизации.Добавить("ДатаОкончания");
	
	ДанныеАвторизации		= тл_РаботаСxDE.ПолучитьПараметрыАвторизации(ПараметрыАвторизации); 
	ТокенПроверен			= тл_РаботаСxDE.ПроверитьДатуОкончанияТокена();
	
	Возврат Новый ФиксированнаяСтруктура("Токен, ДатаОкончания, ТокенПроверен", ДанныеАвторизации.Токен, ДанныеАвторизации.ДатаОкончания, ТокенПроверен);
	
КонецФункции

&НаКлиенте
Процедура ПроверитьДатуОконченияТокена()
	
	Если ТокенПроверен Тогда
		Элементы.Токен.ЦветТекста		= WebЦвета.Зеленый;		
	Иначе
		Элементы.Токен.ЦветТекста		= WebЦвета.Красный;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОписаниеОбновленийРасширения(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Обновлять", Ложь);
	ОткрытьФорму("ОбщаяФорма.тл_ОписаниеИзмененийРасширения", ПараметрыФормы);
	
КонецПроцедуры


&НаКлиенте
Процедура ОткрытьСведенияОЛицензии(Команда)
	ОткрытьФорму("Обработка.тл_Настройки.Форма.СведенияОЛицензии");
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаНастроекЯщиковОрганизацийКонтрагентов(Команда)
	ОткрытьФорму("Обработка.тл_ПроверкаНастроекЯщиковОрганизацийКонтрагентов.Форма.Форма");
КонецПроцедуры

#КонецОбласти


#Область ИнформацияОЛицензии

&НаСервере
Процедура ПолучитьИнформациюОЛицензииНаСервере()
	
	
	Общие.Очистить();
	Лицензия.Очистить();
	Компании.Очистить();
	Компоненты.Очистить();
	ВременнойИнтервал.Очистить();
	//TFS_9736 не получать лицензию, если нет подключения к сервису
	URLЭДО = тл_ЭДОПовтИсп.ПолучитьURLСервераЭДО();
	Если ЗначениеЗаполнено(URLЭДО) Тогда 
		// Получим актуальную информацию, без задействования повторного использования
		//TFS_9438_begin
		//ИнформацияОЛицензии	= тл_Лицензирование.ПолучитьПолнуюИнформациюОЛицензии();
		
		КоличествоДнейДоОкончанияДействияЛицензииXDE = Константы.тл_КоличествоДнейДоОкончанияДействияЛицензииXDE.Получить();
		ИнформацияОЛицензии	= тл_Лицензирование_Вызовы_xDE.ПолучитьПолнуюИнформациюОЛицензии();
		//TFS_9438_end
		
		Если НЕ ИнформацияОЛицензии = Неопределено Тогда 
			МассивПроверяемыхКомпонентов = тл_Лицензирование.ПолучитьМассивПроверяемыхКомпонентов();
			Макет = ПолучитьОбщийМакет("тл_СоответствиеИменСинонимовЛицензии");
			
			ОбластьМакета = Макет.ПолучитьОбласть("Область");	
			КоличествоСтрок = ОбластьМакета.ВысотаТаблицы;
			Для НомерСтроки = 1 По КоличествоСтрок Цикл
				
				ИмяСтраницы = СокрЛП(ОбластьМакета.Область(НомерСтроки, 4).Текст);
				Если НЕ ЗначениеЗаполнено(ИмяСтраницы) Тогда
					Продолжить;
				КонецЕсли;
				
				ИмяПараметра = СокрЛП(ОбластьМакета.Область(НомерСтроки, 1).Текст);
				ТипПараметра = СокрЛП(ОбластьМакета.Область(НомерСтроки, 3).Текст);
				Синоним = СокрЛП(ОбластьМакета.Область(НомерСтроки, 5).Текст);
				МассивИменПараметра = СтрРазделить(ИмяПараметра, ".");
				ЗначениеПараметра = ИнформацияОЛицензии;
				Для каждого ИмяПараметраМассива Из МассивИменПараметра Цикл
					Если НЕ ЗначениеПараметра = Неопределено Тогда
						ЗначениеПараметра = ЗначениеПараметра[ИмяПараметраМассива];
					КонецЕсли;
				КонецЦикла;
				
				Если ЗначениеПараметра = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				Если ТипПараметра = "Массив" Тогда
					Для каждого СтрокаМассива Из ЗначениеПараметра Цикл
						Если ИмяСтраницы = "Компании" Тогда
							НоваяСтрока = ЭтаФорма[ИмяСтраницы].Добавить();
							НоваяСтрока.ИНН = СтрокаМассива.INN;
							НоваяСтрока.Наименование = СтрокаМассива.Name;
						ИначеЕсли ИмяСтраницы = "Компоненты" Тогда
							НоваяСтрока = ЭтаФорма[ИмяСтраницы].Добавить();
							НоваяСтрока.ИдентификаторКомпонента = СтрокаМассива.Id;
							НоваяСтрока.ОписаниеКомпонента = СтрокаМассива.Description;
							НоваяСтрока.ДатаНачалаДействия = СтрокаМассива.ValidFrom;
							НоваяСтрока.ДатаОкончанияДействия = СтрокаМассива.ValidTo;
							
							Если НЕ МассивПроверяемыхКомпонентов.Найти(НоваяСтрока.ИдентификаторКомпонента) = Неопределено Тогда
								НоваяСтрока.Проверять = Истина;
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;
				Иначе
					НоваяСтрока = ЭтаФорма[ИмяСтраницы].Добавить();
					НоваяСтрока.Параметр = Синоним;
					НоваяСтрока.Значение = ЗначениеПараметра;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли; 
	Иначе
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Необходима авторизация на сервисе xDE");
	КонецЕсли; //TFS_9736 не получать лицензию, если нет подключения к сервису
	
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьИнформациюОЛицензии(Команда)
	ПолучитьИнформациюОЛицензииНаСервере();
КонецПроцедуры

&НаСервере
Функция ПолучитьДатуДействияТекущегоКомпонентаНаСервере(ИдентификаторКомпонента)
	Возврат тл_Лицензирование.ПолучитьДатуОкончанияДействияКомпонентаЛицензии(ИдентификаторКомпонента);
КонецФункции

&НаКлиенте
Процедура ПолучитьДатуДействияТекущегоКомпонента(Команда)
	ТекущиеДанные = Элементы.Компоненты.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ДатаДействия = ПолучитьДатуДействияТекущегоКомпонентаНаСервере(ТекущиеДанные.ИдентификаторКомпонента);
	ОбщегоНазначенияКлиент.СообщитьПользователю(ДатаДействия);
КонецПроцедуры

&НаСервере
Функция ПолучитьСрокДействияЛицензииНаСервере()
	Возврат тл_Лицензирование.ПолучитьДатуОкончанияДействияЛицензии();
КонецФункции

&НаКлиенте
Процедура ПолучитьСрокДействияЛицензии(Команда)
	ДатаДействия = ПолучитьСрокДействияЛицензииНаСервере();
	ОбщегоНазначенияКлиент.СообщитьПользователю(ДатаДействия);
КонецПроцедуры

&НаСервере
Процедура КоличествоДнейДоОкончанияДействияЛицензииXDEПриИзмененииНаСервере()
	Константы.тл_КоличествоДнейДоОкончанияДействияЛицензииXDE.Установить(КоличествоДнейДоОкончанияДействияЛицензииXDE);
КонецПроцедуры

&НаКлиенте
Процедура КоличествоДнейДоОкончанияДействияЛицензииXDEПриИзменении(Элемент)
	КоличествоДнейДоОкончанияДействияЛицензииXDEПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Функция  ДействуетКомпонентЛицензииРоумингНаСервере(ИдентификаторКомпонента)
	Возврат тл_Лицензирование.ДействуетКомпонентЛицензииРоуминг(ИдентификаторКомпонента);
КонецФункции

&НаКлиенте
Процедура ДействуетКомпонентЛицензииРоуминг(Команда)
	ТекущиеДанные = Элементы.Компоненты.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ОбщегоНазначенияКлиент.СообщитьПользователю(ДействуетКомпонентЛицензииРоумингНаСервере(ТекущиеДанные.ИдентификаторКомпонента));
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДанныеСертификатовXDE(Команда)
	ОбновитьДанныеСертификатовXDEНаСервере();
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеСертификатовXDEНаСервере()
	//TFS_9736 не получать лицензию, если нет подключения к сервису
	URLЭДО = тл_ЭДОПовтИсп.ПолучитьURLСервераЭДО();
	Если ЗначениеЗаполнено(URLЭДО) Тогда 		
		ТаблицаДанных = тл_ПодписаниеXDE.ПолучитьДанныеСертификатовXDE();
		//TFS_9737
		Если ТаблицаДанных <> Неопределено Тогда 
			СертификатыXDE.Загрузить(ТаблицаДанных);
		КонецЕсли; 
	Иначе
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Необходима авторизация на сервисе xDE");
		
	КонецЕсли;
	//TFS_9736
КонецПроцедуры

&НаКлиенте
Процедура ГруппаСтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	ОбновитьДанныеПриСменеСтраницы(ТекущаяСтраница);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДанныеПриСменеСтраницы(ТекущаяСтраница = Неопределено)
	
	Если ТекущаяСтраница = Неопределено Тогда
		ТекущаяСтраница = Элементы.ГруппаСтраницы.ТекущаяСтраница;
	КонецЕсли;
	
	Если ТекущаяСтраница = Элементы.ГруппаСведенияОЛицензии Тогда
		ПолучитьИнформациюОЛицензииНаСервере();
	ИначеЕсли ТекущаяСтраница = Элементы.ГруппаПодписаниеXDE Тогда
		ОбновитьДанныеСертификатовXDEНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьВИБДанныеСертификатаXDE(Команда)
	Если ЕстьПомеченныеНесохраненныеСертификаты() Тогда
		Оповещение = Новый ОписаниеОповещения("СохранитьДанныеСертификатаЗавершение", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, "Сохранить данные сертификатов xDE в информационной базе по всем помеченным строкам?", 
		РежимДиалогаВопрос.ДаНетОтмена, 0);
	Иначе
		ОбщегоНазначенияКлиент.СообщитьПользователю("Не выбраны записи, для которых данные не сохранены в информационной базе.");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СохранитьДанныеСертификатаЗавершение(Результат, Параметры) Экспорт
	Если Результат = КодВозвратаДиалога.Да Тогда
		Для каждого СтрокаСертификата Из СертификатыXDE Цикл
			Если СтрокаСертификата.Пометка И НЕ ЗначениеЗаполнено(СтрокаСертификата.СертификатИБ) Тогда
				СертификатСсылка = тл_ПодписаниеXDE.СоздатьСертификатПоДаннымXDE(СтрокаСертификата.Отпечаток);
				Если НЕ ЗначениеЗаполнено(СертификатСсылка) Тогда
					Сообщить("На сервере xDE не найден сертификат по отпечатку " + СтрокаСертификата.Отпечаток);
				КонецЕсли;
				СтрокаСертификата.СертификатИБ = СертификатСсылка;
				СтрокаСертификата.Пометка = Ложь;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Функция ЕстьПомеченныеНесохраненныеСертификаты()
	ЕстьПомеченныеНесохраненные = Ложь;
	Для каждого СтрокаСертификата Из СертификатыXDE Цикл
		Если СтрокаСертификата.Пометка И НЕ ЗначениеЗаполнено(СтрокаСертификата.СертификатИБ) Тогда
			ЕстьПомеченныеНесохраненные = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Возврат ЕстьПомеченныеНесохраненные;
КонецФункции


&НаКлиенте
Процедура СертификатыXDEСертификатИБОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
КонецПроцедуры

&НаКлиенте
Процедура СертификатыXDEВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	Если ЗначениеЗаполнено(Элемент.ТекущиеДанные.СертификатИБ) Тогда
		ПараметрыОткрытия = Новый Структура("Ключ", Элемент.ТекущиеДанные.СертификатИБ);
		ОткрытьФорму("Справочник.СертификатыКлючейЭлектроннойПодписиИШифрования.Форма.тл_ФормаЭлементаРеквизитовДляПодписанияXDE", ПараметрыОткрытия);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ОбновитьДанныеПриСменеСтраницы();
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьПодключениеЭДО(Команда)
	Элементы.ДекорацияПроверитьПодключениеЭДО.Заголовок = ПроверитьДоступностьАдреса(URLСервисаЭДО);
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьПодключениеАрхив(Команда)
	Элементы.ДекорацияПроверитьПодключениеАрхив.Заголовок = ПроверитьДоступностьАдреса(URLСервераАрхива);
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьПодключениеКриптография(Команда)
	Элементы.ДекорацияПроверитьПодключениеКриптография.Заголовок = ПроверитьДоступностьАдреса(URLСервисаКриптографии);
КонецПроцедуры

Функция ПроверитьДоступностьАдреса(Адрес)
	ТекстСообщения = "";
	Если НЕ ЗначениеЗаполнено(Адрес) Тогда
		Возврат ТекстСообщения;
	КонецЕсли;
	ДанныеАвторизации = Новый Структура("Логин,Пароль,Адрес", Логин, Пароль, Адрес);
	ТекстСообщения = ВыполнитьАвторизацию(ДанныеАвторизации);
	
	Возврат ТекстСообщения;
	
КонецФункции

Функция ВыполнитьАвторизацию(ДанныеАвторизации) Экспорт
	
	СтруктураЗапроса		= Новый Структура;
	СтруктураЗапроса.Вставить("Username", 	ДанныеАвторизации.Логин);
	СтруктураЗапроса.Вставить("Password", 	ДанныеАвторизации.Пароль);
	
	ПараметрыЗапроса 		= тл_ЭДО.ПолучитьСтруктуруПараметровHTTPЗапроса("POST", "/token", СтруктураЗапроса, Истина);
	
	HTTPЗапрос 	= тл_ЭДО.ПолучитьHTTPЗапросСАвторизацией(ПараметрыЗапроса.АдресРесурса, ПараметрыЗапроса);	
	HTTPЗапрос.УстановитьТелоИзСтроки(ПараметрыЗапроса.Тело);
	
	HTTPСоединение		= тл_ЭДО_Вызовы_xDE.ПолучитьHTTPСоединение(ДанныеАвторизации.Адрес);
	
	Попытка
		Результат 			= HTTPСоединение.ВызватьHTTPМетод(ПараметрыЗапроса.Метод, HTTPЗапрос);
		Если Результат = Неопределено Тогда
			ТекстСообщения = "Ошибка подключеня к серверу: ";
		Иначе
			Если Результат.КодСостояния = 200 Тогда 
				ТекстСообщения = "Подключение установлено";
			Иначе
				ТекстСообщения = "Ошибка подключения, сервер вернул код состояния: " + Строка(Результат.КодСостояния);
			КонецЕсли;
		КонецЕсли;
	Исключение
		ОписаниеОшибки = ОписаниеОшибки();
		ТекстСообщения = "Ошибка подключеня к серверу: " + ОписаниеОшибки;
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
	КонецПопытки;
	
	Возврат ТекстСообщения;	
КонецФункции //ВыполнитьАвторизацию

&НаСервере
Процедура КомпонентыПроверятьПриИзмененииНаСервере(Проверять, ИдентификаторКомпонента, ОписаниеКомпонента)
	//РС = РегистрыСведений.тл_ПроверяемыеКомпонентыЛицензии.СоздатьКлючЗаписи(Новый Структура("ИдентификаторКомпонента", ИдентификаторКомпонента));
	Менеджер = РегистрыСведений.тл_ПроверяемыеКомпонентыЛицензии.СоздатьМенеджерЗаписи();
	Менеджер.ИдентификаторКомпонента = ИдентификаторКомпонента;
	Менеджер.Прочитать();
	Если Менеджер.Выбран() Тогда
		Если НЕ Проверять Тогда
			Менеджер.Удалить();
		КонецЕсли;
	Иначе
		Если Проверять Тогда
			Менеджер.ИдентификаторКомпонента = ИдентификаторКомпонента;
			Менеджер.ОписаниеКомпонента = ОписаниеКомпонента;
			Менеджер.Записать(Истина);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КомпонентыПроверятьПриИзменении(Элемент)
	ТекущиеДанные = Элементы.Компоненты.ТекущиеДанные;
	КомпонентыПроверятьПриИзмененииНаСервере(ТекущиеДанные.Проверять, ТекущиеДанные.ИдентификаторКомпонента, ТекущиеДанные.ОписаниеКомпонента);
КонецПроцедуры

&НаКлиенте
Процедура КомпонентыЛицензииУстановитьФлажки(Команда)
	Для каждого ТекущиеДанные Из Компоненты Цикл
		ТекущиеДанные.Проверять = Истина;
		КомпонентыПроверятьПриИзмененииНаСервере(ТекущиеДанные.Проверять, ТекущиеДанные.ИдентификаторКомпонента, ТекущиеДанные.ОписаниеКомпонента);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура КомпонентыЛицензииСнятьФлажки(Команда)
	Для каждого ТекущиеДанные Из Компоненты Цикл
		ТекущиеДанные.Проверять = Ложь;
		КомпонентыПроверятьПриИзмененииНаСервере(ТекущиеДанные.Проверять, ТекущиеДанные.ИдентификаторКомпонента, ТекущиеДанные.ОписаниеКомпонента);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ВызватьНастройкиОтправки(Команда)
	ОткрытьФорму("Обработка.тл_РаботаСКонтрагентами.Форма.НастройкиОтправкиДокументов");
КонецПроцедуры

&НаКлиенте
Процедура ЗапускПриглашенийПартнеров(Команда)
	ОткрытьФорму("Обработка.тл_РаботаСКонтрагентами.Форма.Форма");
КонецПроцедуры


&НаКлиенте
Процедура ЗапуститьПолучениеДокументов(Команда)
	РегламентноеЗаданиие();
	
КонецПроцедуры
&НаСервере
процедура РегламентноеЗаданиие()
	
	тл_РегламентноеСобытие = ПолучитьРегламентноезадание();
	тл_РегламентноеСобытие.Расписание =  СоздатьРасписаниеРегламентногоЗадания();
	Если ЗапускатьАвтоматическоеПолучениеДокументов Тогда
		тл_РегламентноеСобытиеИспользование = Истина; 
	Иначе
		тл_РегламентноеСобытие.Использование = Ложь
	КонецЕсли;
	тл_РегламентноеСобытие.Записать();
КонецПроцедуры

&НаСервере
Функция СоздатьРасписаниеРегламентногоЗадания()
	
	
	Расписание = Новый РасписаниеРегламентногоЗадания();
	Расписание.ПериодПовтораВТечениеДня	= ЗапускатьКаждые;
	Расписание.ПериодПовтораДней = 1;
	ДниНедели = Новый Массив();  
	Для День = 1 По 7 Цикл
		ДниНедели.Добавить(День);
	КонецЦикла;
	Расписание.ДниНедели = ДниНедели;
	
	Месяцы = Новый Массив();   
	Для Месяц = 1 По 12 Цикл
		Месяцы.Добавить(Месяц);
	КонецЦикла;	
	
	Расписание.Месяцы = Месяцы;
	
	
	Возврат Расписание;
	
КонецФункции

Функция ПолучитьРегламентноезадание()
	Задания=РегламентныеЗадания.ПолучитьРегламентныеЗадания(новый Структура("Метаданные", Метаданные.РегламентныеЗадания["тл_ПолучитьСобытияЭДО"]));
	Если Задания.Количество()>0 Тогда
		тл_РегламентноеСобытие=Задания[0];
	Иначе
		тл_РегламентноеСобытие = РегламентныеЗадания.СоздатьРегламентноеЗадание("тл_ПолучитьСобытияЭДО");
	КонецЕсли; 
	Возврат тл_РегламентноеСобытие; 	
КонецФункции

&НаСервере
Процедура СохранитьСостояниеСобытия()
	тл_РегламентноеСобытие = ПолучитьРегламентноезадание();
	Если ЗапускатьАвтоматическоеПолучениеДокументов Тогда
		тл_РегламентноеСобытиеИспользование = Истина; 
	Иначе
		тл_РегламентноеСобытие.Использование = Ложь;
	КонецЕсли;
	тл_РегламентноеСобытие.Записать();
КонецПроцедуры	


&НаКлиенте
Процедура ЗапускатьАвтоматическоеПолучениеДокументовПриИзменении(Элемент)
	СохранитьСостояниеСобытия();
КонецПроцедуры

&НаСервере
Процедура ТекущаяНастройкаПриИзмененииНаСервере()
	
	ОсновнаяНастройка = Справочники.тл_НастройкиЭДО.НайтиПоРеквизиту("ОсновнаяНастройка",Истина);
	
	НастройкаОсновная = ОсновнаяНастройка.ПолучитьОбъект();
	НастройкаОсновная.ОсновнаяНастройка = Ложь;
	НастройкаОсновная.Записать();
	
	
	ТекНастройка = ТекущаяНастройка.ПолучитьОбъект();
	ТекНастройка.ОсновнаяНастройка = Истина;
	ТекНастройка.Записать(); 
	
	ПолучитьНастройкуИзВыбранногоЗначения();
КонецПроцедуры

&НаКлиенте
Процедура ТекущаяНастройкаПриИзменении(Элемент)
	ТекущаяНастройкаПриИзмененииНаСервере();
КонецПроцедуры
Процедура ПолучитьНастройкуИзВыбранногоЗначения()
	СтруктураНастроек = тл_ЭДОПовтИсп.ПолучитьОсновнуюНастройкуЭДОПоВыбору(ТекущаяНастройка);
	ОсновнаяНастройка = СтруктураНастроек.Ссылка;
	URLСервераАрхива = СтруктураНастроек.URLСервераАрхива;
	URLСервисаЭДО = СтруктураНастроек.URLСервисаЭДО;
	URLСервисаКриптографии = ?(СтруктураНастроек.Свойство("URLСервисаКриптографии"), СтруктураНастроек.URLСервисаКриптографии, "");
	РегистрацияЛогов = СтруктураНастроек.РегистрацияЛогов;
	РегистрацияОшибокРС = СтруктураНастроек.РегистрацияОшибокРС;
	РегистрацияОшибокЖР = СтруктураНастроек.РегистрацияОшибокЖР;
	ПечатныеФормыxDE = СтруктураНастроек.ПечатныеФормыxDE;
КонецПроцедуры

&НаКлиенте
Процедура ЗапускМастераИнтеграции(Команда)
	ПараметрыФормы = Новый Структура;
	ОткрытьФорму("Обработка.тл_Настройки.Форма.МастерНастроекXDEPRO", ПараметрыФормы);

КонецПроцедуры


#КонецОбласти  // ИнформацияОЛицензии

ВыполняетсяЗакрытие = Ложь;

