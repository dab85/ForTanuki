///////////////////////////////////////////////////////////////////////////////////////////////////////
// Модуль предназначен для интеграции с подсистемой 1С:ЭДО, а так же
// содержит функциональное расширение для регистрации ЭТРН
//
// Все права защищены. 
// Copyright (c) 2024, ООО ТерраЛинк Девелопмент
// Разработчик Бабич Д.А.

#Область ОбщиеМетоды 

Процедура ОбщийФункционалЗапуска(Организация,ТелоЗапросаСтруктура, ПараметрыЗапроса,Роль)
	
	РезультирующиеПараметры = СтруктураДеталейДокумента();
	РезультирующиеПараметры.DocumentId = ТелоЗапросаСтруктура.DocumentId;
	РезультатКонтент =  тл_РегистрацияКонтента(ТелоЗапросаСтруктура, ПараметрыЗапроса);
	
	
	Если РезультатКонтент.Ошибка = Ложь Тогда
		
		РезультатСсылкаНаАрхив = ОбменСШинойЭДОЭлектронныйЭТРНШагПолучитьСсылкуНаКонтент(РезультатКонтент.Результат, ПараметрыЗапроса);
		
		ИдентификаторДокумента 										= РезультатСсылкаНаАрхив.Результат.Results[0].DocumentId ;
		ИмяФайла													= РезультатСсылкаНаАрхив.Результат.Results[0].Name;
		СсылкаНаАрхив 												= ПолучитьXML_ЭТРН_изАрхива(Организация, ИдентификаторДокумента, РезультатСсылкаНаАрхив.Результат.Results[0].ContentLinkId);
		
		СсылкаНаАрхивКонтента 										=  РезультатСсылкаНаАрхив.Результат.Results[0].ContentLinkId;
		
		РезультирующиеПараметры.ContentLinkId                       = СсылкаНаАрхивКонтента;
		
		СсылкаНаПодпись 											=  СсылкаНаАрхив.Результат;
		
		РезультирующиеПараметры.SignatureLinkId						=  СсылкаНаПодпись;
		РезультирующиеПараметры.Name								=  Строка(ИмяФайла);
		
		МассивРезультатов = Новый Массив;
		МассивРезультатов.Добавить(РезультирующиеПараметры);
		
		СтруктураОтправки = Новый структура();
		СтруктураОтправки.Вставить("SignedTitlesOrReceipts",МассивРезультатов);
		
		ИтоговыйОтклик 												= ЛокальныйПриемГруза(СтруктураОтправки,ПараметрыЗапроса);
		
		
		Если НЕ ИтоговыйОтклик.Ошибка = Истина Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрШаблон("%1 успешно отправлен",Роль));
		Иначе
			
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрШаблон("Ошибка отправки  %1", Роль));
			
		КонецЕсли
	КонецЕсли;	
	
	
КонецПроцедуры	

Функция тл_РегистрацияКонтента(Параметры,ПараметрыЗапросаВход)
	
	ТелоЗапроса		  	 										= тл_ЭДООбщиеПроцедурыИФункции.СтруктураJSONВСтроку(Параметры);
	ТелоЗапроса 												= СтрЗаменить(ТелоЗапроса, """null""","null"); 
	ПараметрыЗапроса 											= Новый Структура;
	ПараметрыЗапроса.Вставить("Метод", 			"POST");	
	ПараметрыЗапроса.Вставить("Тело", 			ТелоЗапроса);	   
	ПараметрыЗапроса.Вставить("АдресРесурса", 	ПараметрыЗапросаВход.Запрос1);
	
	тл_Токен = тл_РаботаСxDE.ПолучитьТокен();
	Результат = тл_ЭДООбщиеПроцедурыИФункции_Вызовы_xDE.ВыполнитьЗапросЭДОxDE(ПараметрыЗапроса, "Массив", тл_Токен);
	Возврат  Результат;
	
КонецФункции

Функция ОбменСШинойЭДОЭлектронныйЭТРНШагПолучитьСсылкуНаКонтент(Параметры, ПараметрыЗапроса) Экспорт 
	РезультатВыполнения 										= тл_ЭДООбщиеПроцедурыИФункции.ПолучитьПустуюСтруктуруРезультатВыполнения();
	
	Пока НЕ ЗначениеЗаполнено(РезультатВыполнения.Результат)И Не РезультатВыполнения.Ошибка Цикл // пытаемся сделать много попыток пока не получим заполненный результат         
		
		СтруктураРезультатаЭДО	 								= КомандаЭДО_ПолучитьСсылкуНаКонтентЭТРН(Параметры, ПараметрыЗапроса);
		
		// Обновим состояние выполнения Задачи 
		
		Если СтруктураРезультатаЭДО.Статус = 1 и СтруктураРезультатаЭДО.Результат <> Неопределено 
			И СтруктураРезультатаЭДО.Результат.Results <> Неопределено Тогда
			
			ПромРезультат										= ?(СтруктураРезультатаЭДО.Результат.Results.Количество(), 
			СтруктураРезультатаЭДО.Результат.Results[0], Новый Структура("ContentLinkId", -1));
			
			РезультатВыполнения.Результат						= тл_РаботаСxDE.ЧислоКСтроке(ПромРезультат.ContentLinkId);
			РезультатВыполнения.Выполнено						= Истина;       
		ИначеЕсли СтруктураРезультатаЭДО.Статус 				= 0 Тогда
			РезультатВыполнения.Статус							= 0;
		Иначе
			РезультатВыполнения.Статус							= 0;
			РезультатВыполнения.Ошибка							= Истина;
		КонецЕсли;  
		
		Если НЕ ЗначениеЗаполнено(РезультатВыполнения.Результат) Тогда
			ТЛ_ЭДО.Пауза(0.5);
		КонецЕсли;		
	КонецЦикла;  
	
	Возврат СтруктураРезультатаЭДО;
КонецФункции 

Функция КомандаЭДО_ПолучитьСсылкуНаКонтентЭТРН( ДополнительныеПараметры = Неопределено,ПараметрыЗапросаВход, _Ошибка = Ложь) Экспорт
	
	НомерЗадачи													= ДополнительныеПараметры;
	СтруктураЗапроса											= Новый Структура;	
	ТелоЗапроса  	 											= тл_ЭДООбщиеПроцедурыИФункции.СтруктураJSONВСтроку(СтруктураЗапроса);	
	
	ПараметрыЗапроса 											= Новый Структура;
	ПараметрыЗапроса.Вставить("Тело", 			ТелоЗапроса);
	ПараметрыЗапроса.Вставить("Метод",			"GET");	
	ПараметрыЗапроса.Вставить("АдресРесурса", 	ПараметрыЗапросаВход.Запрос2 + НомерЗадачи);
	
	РезультатВыполненияСсылка									= тл_ЭДООбщиеПроцедурыИФункции_Вызовы_xDE.ВыполнитьЗапросЭДОxDEРезультатСтатусАсинхроннойОперации(ПараметрыЗапроса);
	
	Если РезультатВыполненияСсылка.Результат = Неопределено Тогда
		Возврат РезультатВыполненияСсылка;
	КонецЕсли;
	Если РезультатВыполненияСсылка.Статус = 1 Тогда 			
		Если РезультатВыполненияСсылка.Результат.TaskStatus 	= 1 И НЕ РезультатВыполненияСсылка.Ошибка Тогда 			
			TaskResultId										= РезультатВыполненияСсылка.Результат.Results[0];
			КодРезультатаРаботаСАрхивом							= TaskResultId.ContentLinkId;						
			СтруктураЗаписьАрхива								= РегистрыСведений.тл_АрхивДокументовЭДО.ЗначенияПоУмолчанию();		
			СтруктураЗаписьАрхива.ИдентификаторДокумента		= TaskResultId.DocumentId;
			СтруктураЗаписьАрхива.ПутьКАрхиву  					= TaskResultId.ContentLinkId;
			СтруктураЗаписьАрхива.ИмяФайла  					= TaskResultId.Name;
			СтруктураЗаписьАрхива.Расширение					= тл_РаботаСxDE.ПолучитьРасширениеФайла(TaskResultId.Name);			
			РегистрыСведений.тл_АрхивДокументовЭДО.НоваяЗаписьАрхива(СтруктураЗаписьАрхива); 			
		Иначе 			
			РезультатВыполненияСсылка.Статус					= 0;			
			
		КонецЕсли;		
	КонецЕсли;
	
	
	Возврат РезультатВыполненияСсылка;
	
КонецФункции

Функция ПолучитьXML_ЭТРН_изАрхива(Организация, ДокументИД, СсылкаНаАрхив)
	
	ПараметрыЗадачи 											= Новый Структура;
	
	ПараметрыЗадачи.Вставить("СсылкаНаАрхив", СсылкаНаАрхив);	
	Результат 													= тл_ОперацииЭДО.ОбменСШинойЭДОЭлектронныйДокументШагПрочитатьИзАрхива("","","","",ПараметрыЗадачи);
	
	ДвоичныеДанные 												= ПолучитьИзВременногоХранилища(Результат.Результат);
	
	СтрокаBase64 												= Base64Строка(ДвоичныеДанные);
	СтрокаBase64							 					= СтрЗаменить(СтрокаBase64, Символы.ВК, "");
	СтрокаBase64 												= СтрЗаменить(СтрокаBase64, Символы.ПС, "");
	РезультатПодпись 											= тл_РаботаСМЧД003.ПодписаниеНаСервереЛокально(Организация, ДвоичныеДанные);
	тл_ЭДО.Пауза(0.5);
	
	Результат 													= тл_РаботаСМЧД003.ОбменСШинойЭДОЭлектронныйДокументШагЗаписатьВАрхив(ДокументИД,,,,,РезультатПодпись.СформированнаяПодпись,СсылкаНаАрхив);
	тл_ЭДО.Пауза(0.5);
	Результат.Вставить("СформированнаяПодпись", РезультатПодпись.СформированнаяПодпись);
	Возврат Результат;
КонецФункции

Функция ЛокальныйПриемГруза(Параметры,ПараметрыЗапросаВход)
	
	ТелоЗапроса		  	 										= тл_ЭДООбщиеПроцедурыИФункции.СтруктураJSONВСтроку(Параметры);
	
	ПараметрыЗапроса 											= Новый Структура;
	ПараметрыЗапроса.Вставить("Метод", 			"POST");	
	ПараметрыЗапроса.Вставить("Тело", 			ТелоЗапроса);	   
	ПараметрыЗапроса.Вставить("АдресРесурса", 	ПараметрыЗапросаВход.Запрос3);
	
	тл_Токен = тл_РаботаСxDE.ПолучитьТокен();
	Результат = тл_ЭДООбщиеПроцедурыИФункции_Вызовы_xDE.ВыполнитьЗапросЭДОxDE(ПараметрыЗапроса, "Массив", тл_Токен);
	Возврат  Результат;
	
КонецФункции
Функция ПолучитьМинТрансИД(Параметры)Экспорт
	Результат = "";
	Если Не ТипЗнч(Параметры) = Тип("ДокументСсылка.ЭлектронныйДокументВходящийЭДО") Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	тл_ЗначенияРеквизитовПолуформализованныхДокументов.Значение КАК МинТрансИД
		|ИЗ
		|	РегистрСведений.ОбъектыУчетаДокументовЭДО КАК ОбъектыУчетаДокументовЭДО
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.тл_ЗначенияРеквизитовПолуформализованныхДокументов КАК тл_ЗначенияРеквизитовПолуформализованныхДокументов
		|		ПО ОбъектыУчетаДокументовЭДО.ЭлектронныйДокумент = тл_ЗначенияРеквизитовПолуформализованныхДокументов.ЭлектронныйДокумент
		|ГДЕ
		|	ОбъектыУчетаДокументовЭДО.ОбъектУчета = &ОбъектУчета
		|	И тл_ЗначенияРеквизитовПолуформализованныхДокументов.Атрибут = ""ETRN_MintransId""";
		
		Запрос.УстановитьПараметр("ОбъектУчета", Параметры.Ссылка);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Если ВыборкаДетальныеЗаписи.Следующий() Тогда
			Результат = ВыборкаДетальныеЗаписи.МинТрансИД;
		КонецЕсли;
	Иначе
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	тл_ЗначенияРеквизитовПолуформализованныхДокументов.Значение КАК МинТрансИД
		|ИЗ
		|	РегистрСведений.тл_ЗначенияРеквизитовПолуформализованныхДокументов КАК тл_ЗначенияРеквизитовПолуформализованныхДокументов
		|ГДЕ
		|	тл_ЗначенияРеквизитовПолуформализованныхДокументов.Атрибут = ""ETRN_MintransId""
		|	И тл_ЗначенияРеквизитовПолуформализованныхДокументов.ЭлектронныйДокумент = &ЭлектронныйДокумент";
		
		Запрос.УстановитьПараметр("ЭлектронныйДокумент", Параметры.Ссылка);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Если ВыборкаДетальныеЗаписи.Следующий() Тогда
			Результат = ВыборкаДетальныеЗаписи.МинТрансИД;
		КонецЕсли;	КонецЕсли;
		
		Возврат Результат;
		
	КонецФункции	
	
	Функция тл_ПолучитьИдентификаторДокумента(Параметры)
		Результат = Неопределено;
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	ОбъектыУчетаДокументовЭДО.ОбъектУчета КАК ОбъектУчета,
		|	ЕСТЬNULL(ОбъектыУчетаДокументовЭДО.ЭлектронныйДокумент.ИдентификаторДокументооборота, """") КАК ИдентификаторДокументооборота
		|ИЗ
		|	РегистрСведений.ОбъектыУчетаДокументовЭДО КАК ОбъектыУчетаДокументовЭДО
		|ГДЕ
		|	ОбъектыУчетаДокументовЭДО.ОбъектУчета = &ОбъектУчета";
		
		Запрос.УстановитьПараметр("ОбъектУчета", Параметры);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Если ВыборкаДетальныеЗаписи.Следующий() Тогда
			Результат  = ВыборкаДетальныеЗаписи.ИдентификаторДокументооборота;
			Возврат Результат;
		КонецЕсли;
		Возврат Результат;	
	КонецФункции	
	Функция ПолучитьОтпечатокСтрокой(Параметры) Экспорт
		Результат 													= "";
		Запрос 														= Новый Запрос;
		Запрос.Текст 												= 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	тл_НастройкиПодписания.ОтпечатокСертификатаСтрокой КАК ОтпечатокСертификатаСтрокой
		|ИЗ
		|	РегистрСведений.тл_НастройкиПодписания КАК тл_НастройкиПодписания
		|ГДЕ
		|	тл_НастройкиПодписания.ЯщикОрганизации.Владелец = &Владелец
		|	И тл_НастройкиПодписания.Используется = ИСТИНА";
		
		Запрос.УстановитьПараметр("Владелец", Параметры.Организация);
		
		РезультатЗапроса 											= Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи 										= РезультатЗапроса.Выбрать();
		
		Если ВыборкаДетальныеЗаписи.Следующий() Тогда
			Результат 												= ВыборкаДетальныеЗаписи.ОтпечатокСертификатаСтрокой;
		КонецЕсли;
		
		Возврат Результат; 
		
	КонецФункции
	
	#КонецОбласти
	
	#Область Грузоперевозчик
	
	#Область СтруктурыЗапросаЛокальногоПриема
	
	Функция СтруктураДеталейДокумента()
		СтруктураДеталей = Новый Структура();
		СтруктураДеталей.Вставить("SignatureLinkId", Неопределено);
		СтруктураДеталей.Вставить("DocumentId", Неопределено);
		СтруктураДеталей.Вставить("Name", Неопределено);
		СтруктураДеталей.Вставить("ContentLinkId", Неопределено);
		Возврат СтруктураДеталей;
	КонецФункции	
	
	#КонецОбласти
	
	#Область СтруктурыЗапросаКонтента
	
	Функция ИтоговаяСтруктура()
		СтруктураОбщая = Новый Структура();
		//СтруктураОбщая.Вставить("SignerStatuses", Неопределено);
		СтруктураОбщая.Вставить("Certificate", Неопределено);
		СтруктураОбщая.Вставить("Signer", Неопределено);
		СтруктураОбщая.Вставить("Comment", Неопределено); 
		СтруктураОбщая.Вставить("DocumentId", Неопределено);
		
		Возврат СтруктураОбщая;	
		
		
	КонецФункции	
	
	Функция СтруктураПодписант()Экспорт
		
		СтруктураПодписант  = Новый Структура();
		СтруктураПодписант.Вставить("Surname","");
		СтруктураПодписант.Вставить("FirstName","");
		СтруктураПодписант.Вставить("MiddleName","");
		СтруктураПодписант.Вставить("Inn","");
		СтруктураПодписант.Вставить("OrganizationName","");
		СтруктураПодписант.Вставить("OrganizationInn","");
		СтруктураПодписант.Вставить("Position",""); 
		
		Возврат СтруктураПодписант; 
		
		
	КонецФункции
	
	Функция СтруктураШапкаДокумента(ИдентификаторДокумента)
		СтруктураШапки = Новый Структура();
		СтруктураШапки.Вставить("DocumentId",ИдентификаторДокумента);
		СтруктураШапки.Вставить("SignerStatus", "0");
		Возврат СтруктураШапки;
		
	КонецФункции
	
	#КонецОбласти
	
	#Область ЗаполнениеСтруктурЗапроса
	
	Функция тл_ТелоЗапросаГрузоперевозчика(Параметры, Организация)
		
		ИдентификаторДокумента = тл_ПолучитьИдентификаторДокумента(Параметры);
		ПараметрыИсполнения = Новый Структура();
		ПараметрыИсполнения.Вставить("Организация", Организация);
		Отпечаток = тл_РаботаСМЧД003.ПолучитьОтпечаток(ПараметрыИсполнения); 
		Сертификат = тл_ОперацииЭДО_Расширение.ПолучитьСертификат(Отпечаток);
		Отпечаток64 = ПолучитьОтпечатокСтрокой(ПараметрыИсполнения);
		ПараметрыСертификата = тл_ПодписаниеXDE. ПолучитьРеквизитыСертификатаПоОтпечатку(Отпечаток64);
		
		
		Подписант = СтруктураПодписант();
		Подписант.Surname = ПараметрыСертификата.Фамилия;
		Подписант.FirstName = ПараметрыСертификата.Имя;
		Подписант.MiddleName = ПараметрыСертификата.Отчество;
		Подписант.Inn = "null";//ПараметрыСертификата.ИНН;
		Подписант.OrganizationName = Строка(Организация);
		Подписант.OrganizationInn = организация.ИНН;
		Подписант.Position = "инженер";//ПараметрыСертификата.Должность;
		
		
		ТелоЗапроса = ИтоговаяСтруктура();
		ТелоЗапроса.Certificate = Сертификат;
		ТелоЗапроса.Signer = Подписант;
		ТелоЗапроса.Comment = "";
		ТелоЗапроса.DocumentId = ИдентификаторДокумента;
		
		Возврат ТелоЗапроса;
		
	КонецФункции
	
	#КонецОбласти
	
	#Область ОсновныеФункции
	
	Функция тл_ОтправкаТитулаГрузоперевозчика(Параметры)Экспорт
		Перевозчик = Неопределено;
		Если Не ТипЗнч(Параметры)=Тип("ДокументСсылка.ЭлектроннаяТранспортнаяНакладная")Тогда
			
			ТелоЗапросаСтруктура = тл_ТелоЗапросаГрузоперевозчика(Параметры.ОбъектыДействий.ОбъектыУчета[0],Параметры.ОбъектыДействий.ОбъектыУчета[0].СсылкаТитулГрузоотправителяПеревозчик);
			Перевозчик = Параметры.ОбъектыДействий.ОбъектыУчета[0].СсылкаТитулГрузоотправителяПеревозчик;	
		Иначе
			ТелоЗапросаСтруктура = тл_ТелоЗапросаГрузоперевозчика(Параметры, Параметры.СсылкаТитулГрузоотправителяПеревозчик);
			Перевозчик = Параметры.СсылкаТитулГрузоотправителяПеревозчик
		КонецЕсли;
		
		ПараметрыЗапроса = Новый Структура();
		ПараметрыЗапроса.Вставить("Запрос1","/document/waybill/transporter/load/cargo/content");
		ПараметрыЗапроса.Вставить("Запрос2","/document/waybill/transporter/load/cargo/content/tasks/");
		ПараметрыЗапроса.Вставить("Запрос3","/documents/waybill/transporter/load/cargo/local");
		
		ОбщийФункционалЗапуска(Перевозчик,ТелоЗапросаСтруктура, ПараметрыЗапроса,"Титул грузоперевозчика");
		
		
	КонецФункции   
	
	Функция тл_ОтправкаТитулаГрузоперевозчикаРазгрузка(Параметры)Экспорт
		
		ТелоЗапросаСтруктура = тл_ТелоЗапросаГрузоперевозчика(Параметры,Параметры.СсылкаТитулГрузоотправителяПеревозчик);
		
		ПараметрыЗапроса = Новый Структура();
		ПараметрыЗапроса.Вставить("Запрос1","/document/waybill/transporter/unload/cargo/content");
		ПараметрыЗапроса.Вставить("Запрос2","/document/waybill/transporter/unload/cargo/content/tasks/");
		ПараметрыЗапроса.Вставить("Запрос3","/documents/waybill/transporter/unload/cargo/local");
		
		ОбщийФункционалЗапуска(Параметры.СсылкаТитулГрузоотправителяПеревозчик,ТелоЗапросаСтруктура, ПараметрыЗапроса,"Титул грузоперевозчика");
		
		
	КонецФункции
	
	
	
	////////////////////////////////////////////////////////////
	
	#КонецОбласти 
	
	#КонецОбласти
	
	#Область Грузополучатель 
	
	#Область СтруктурыЗапросаГрузополучателя
	
	Функция СтруктураШапкиГрузополучателя()
		СтруктураШапки = Новый Структура();
		СтруктураШапки.Вставить("Parameters","");
		СтруктураШапки.Вставить("Certificate","");
		СтруктураШапки.Вставить("Signer","");
		СтруктураШапки.Вставить("Comment","");
		СтруктураШапки.Вставить("DocumentId",""); 
		Возврат СтруктураШапки;
	КонецФункции	
	
	Функция СтруктураПараметрыОтправки()
		СтруктураПараметров = Новый Структура();
		СтруктураПараметров.Вставить("DocumentId", "");
		СтруктураПараметров.Вставить("Accepted", Истина);
		СтруктураПараметров.Вставить("RejectionReason", "");
		СтруктураПараметров.Вставить("ActualArrivalDateTime", "");
		СтруктураПараметров.Вставить("ActualDepartureDateTime", "");
		СтруктураПараметров.Вставить("DeclaredArrivalDateTime", "");
		СтруктураПараметров.Вставить("AcceptedPackagesCount", "0");
		СтруктураПараметров.Вставить("GeneralInformation", "");
		СтруктураПараметров.Вставить("AcceptedCargoGrossWeight", "");
		СтруктураПараметров.Вставить("DeliveryAddress", Неопределено);
		Возврат СтруктураПараметров; 
	КонецФункции
	
	Функция СтруктураАдресОтправки()
		СтруктураАдреса = Новый Структура();
		СтруктураАдреса.Вставить("Postcode","");
		СтруктураАдреса.Вставить("RegionCode","");
		СтруктураАдреса.Вставить("District","");
		СтруктураАдреса.Вставить("City","");
		СтруктураАдреса.Вставить("Locality","");
		СтруктураАдреса.Вставить("Street","");
		СтруктураАдреса.Вставить("House","");
		СтруктураАдреса.Вставить("Building","");
		СтруктураАдреса.Вставить("Flat","");
		
		Возврат СтруктураАдреса;
		
	КонецФункции
	
	Функция ЗаполнитьСтруктуруАдреса(СтруктураАдреса)
		АдресПолучателя = СтруктураАдресОтправки();
		АдресПолучателя.Postcode =  СтруктураАдреса.ZIPcode;
		АдресПолучателя.RegionCode = АдресныйКлассификатор.КодРегионаПоНаименованию(СтруктураАдреса.areaValue);;
		АдресПолучателя.District = СтруктураАдреса.munDistrict;
		АдресПолучателя.City = СтруктураАдреса.areaValue;
		//АдресПолучателя.Locality = СтруктураАдреса.МуниципальныйРайон;
		АдресПолучателя.Street = СтруктураАдреса.streettype+". "+СтруктураАдреса.street;
		АдресПолучателя.House = СтруктураАдреса.HouseNumber;
		АдресПолучателя.Building = ?(СтруктураАдреса.buildings.Количество()>0, СтруктураАдреса.buildings[0].number, "") ;
		//АдресПолучателя.Flat =
		Возврат АдресПолучателя;
	КонецФункции
	#КонецОбласти
	
	#Область ЗаполнениеСтруктурЗапроса
	
	Функция тл_ТелоЗапросаПолучателя(Объект, СтруктураАдреса)
		
		ЗаявленноеВремя = Объект.ТитулГрузополучателяЗаявленныеДатаВремяПрибытия;
		ФактическоеВремяПриб = Объект.ТитулГрузополучателяФактическиеДатаВремяПрибытия;
		ФактическоеВремяУбыт = Объект.ТитулГрузополучателяФактическиеДатаВремяУбытия;
		ИдентификаторДокумента = тл_ПолучитьИдентификаторДокумента(Объект.ЭтотОбъект.Объект.Ссылка);
		АдресПолучателя = ЗаполнитьСтруктуруАдреса(СтруктураАдреса);
		СтруктураПараметры = СтруктураПараметрыОтправки(); 
		СтруктураПараметры.DocumentId = ИдентификаторДокумента;
		СтруктураПараметры.ActualArrivalDateTime = тл_ЭДООбщиеПроцедурыИФункции.ПреобразоватьДату(ФактическоеВремяПриб);// Строка(Формат(ФактическоеВремяПриб,"ДФ=dd.MM.yyyy"))+"T"+Строка(Формат(ФактическоеВремяПриб,"ДФ=HH:mm:ss"));
		СтруктураПараметры.ActualDepartureDateTime = тл_ЭДООбщиеПроцедурыИФункции.ПреобразоватьДату(ФактическоеВремяУбыт);//Строка(Формат(ФактическоеВремяУбыт,"ДФ=dd.MM.yyyy"))+"T"+Строка(Формат(ФактическоеВремяУбыт,"ДФ=HH:mm:ss"));
		СтруктураПараметры.DeclaredArrivalDateTime = тл_ЭДООбщиеПроцедурыИФункции.ПреобразоватьДату(ЗаявленноеВремя);//Строка(Формат(ЗаявленноеВремя,"ДФ=dd.MM.yyyy"))+"T"+Строка(Формат(ЗаявленноеВремя,"ДФ=HH:mm:ss"));
		СтруктураПараметры.GeneralInformation = Объект.ТитулГрузополучателяФактическоеСостояниеГруза;
		СтруктураПараметры.AcceptedCargoGrossWeight = Объект.ТитулГрузополучателяМассаБруттоПринятогоГруза;
		СтруктураПараметры.AcceptedPackagesCount = Объект.ТитулГрузополучателяОбщееКоличествоПринятыхГрузовыхМест;
		СтруктураПараметры.DeliveryAddress = АдресПолучателя; 
		
		
		МассивПараметры = Новый Массив;
		МассивПараметры.Добавить(СтруктураПараметры);
		
		СтруктураШапки = СтруктураШапкиГрузополучателя();
		СтруктураШапки.Parameters = МассивПараметры;
		ПараметрыОтпечатка = Новый Структура();
		ПараметрыОтпечатка.Вставить("Организация",Объект.Объект.Организация);
		Отпечаток = тл_РаботаСМЧД003.ПолучитьОтпечаток(ПараметрыОтпечатка); 
		Сертификат = тл_ОперацииЭДО_Расширение.ПолучитьСертификат(Отпечаток);
		
		СтруктураШапки.Certificate =  Сертификат; 
		Отпечаток64 = ПолучитьОтпечатокСтрокой(Объект.Объект);
		ПараметрыСертификата = тл_ПодписаниеXDE. ПолучитьРеквизитыСертификатаПоОтпечатку(Отпечаток64);
		
		Подписант = СтруктураПодписант();
		Подписант.Surname = ПараметрыСертификата.Фамилия;
		Подписант.FirstName = ПараметрыСертификата.Имя;
		Подписант.MiddleName = ПараметрыСертификата.Отчество;
		Подписант.Inn = "null";//ПараметрыСертификата.ИНН;
		Подписант.OrganizationName = Строка(Объект.Объект.Организация);
		Подписант.OrganizationInn = Объект.Объект.Организация.ИНН;
		Подписант.Position = "инженер";//ПараметрыСертификата.Должность;
		
		СтруктураШапки.Signer =  Подписант;
		СтруктураШапки.Comment = "";
		СтруктураШапки.DocumentId = ИдентификаторДокумента;
		
		Возврат СтруктураШапки;
		
	КонецФункции
	
	#КонецОбласти
	
	#Область ОсновныеФункции
	
	Процедура тл_ОтправкаТитулаГрузополучателя(Объект, СтруктураАдреса)Экспорт
		ТелоЗапросаСтруктура = тл_ТелоЗапросаПолучателя(Объект, СтруктураАдреса);
		ПараметрыЗапроса = Новый Структура();
		ПараметрыЗапроса.Вставить("Запрос1","/document/waybill/receiver/accept/cargo/content");
		ПараметрыЗапроса.Вставить("Запрос2","/document/waybill/receiver/accept/cargo/content/tasks/");
		ПараметрыЗапроса.Вставить("Запрос3","/documents/waybill/receiver/accept/cargo/local");
		
		ОбщийФункционалЗапуска(Объект.Объект.Организация,ТелоЗапросаСтруктура, ПараметрыЗапроса, "Титул грузополучателя");
		
		
		
	КонецПроцедуры
	
	#КонецОбласти
	
	
	#КонецОбласти